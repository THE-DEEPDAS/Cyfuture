import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { Link } from 'react-router-dom';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import styled from '@emotion/styled';
import {
  faSearch,
  faMapMarkerAlt,
  faBriefcase,
  faMoneyBillWave,
  faSlidersH,
  faUserGraduate,
  faUserTie,
  faTimesCircle,
  faCalendarAlt,
  faArrowLeft,
  faArrowRight,
  faStar
} from '@fortawesome/free-solid-svg-icons';
import { listJobs } from '../actions/jobActions';
import Loader from '../components/common/Loader';
import Message from '../components/common/Message';
import { JOB_TYPES, EXPERIENCE_LEVELS } from '../config';

const AnimatedJobCard = styled.div`
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  animation: fadeInUp 0.5s ease forwards;
  animation-delay: ${props => props.index * 150}ms;
  opacity: 0;
  transition: all 0.3s ease;

  &:hover {
    transform: translateY(-4px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
  }
`;

const FilterPanel = styled.div`
  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateX(-20px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  animation: slideIn 0.3s ease forwards;
`;

const PulseLoader = styled.div`
  @keyframes pulse {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }
  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
`;

const ButtonHover = styled.button`
  transition: all 0.2s ease;
  &:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  &:active {
    transform: translateY(0);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
`;

const JobListScreen = () => {
  const dispatch = useDispatch();
  
  const [keyword, setKeyword] = useState('');
  const [location, setLocation] = useState('');
  const [jobType, setJobType] = useState('');
  const [experienceLevel, setExperienceLevel] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [showFilters, setShowFilters] = useState(false);
  
  const jobList = useSelector((state) => state.jobList);
  const { loading, error, jobs, pages, page } = jobList;
  
  useEffect(() => {
    dispatch(listJobs({ 
      keyword, 
      location, 
      jobType, 
      experienceLevel, 
      page: currentPage 
    }));
  }, [dispatch, keyword, location, jobType, experienceLevel, currentPage]);
  
  const searchHandler = (e) => {
    e.preventDefault();
    setCurrentPage(1);
    dispatch(listJobs({ 
      keyword, 
      location, 
      jobType, 
      experienceLevel, 
      page: 1 
    }));
  };
  
  const clearFilters = () => {
    setKeyword('');
    setLocation('');
    setJobType('');
    setExperienceLevel('');
    setCurrentPage(1);
    dispatch(listJobs({}));
  };
  
  const toggleFilters = () => {
    setShowFilters(!showFilters);
  };
  
  return (
    <div className="bg-gray-50 min-h-screen py-10">
      <div className="container mx-auto px-4">
        {/* Header Section */}
        <div className="mb-10 text-center">
          <h1 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">Find Your Perfect Career</h1>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">Browse through our extensive collection of job opportunities from top employers around the world</p>
        </div>
        
        {/* Search & Filter Section */}
        <div className="bg-white rounded-xl shadow-soft p-6 mb-8 border border-gray-100">
          <form onSubmit={searchHandler}>
            <div className="grid grid-cols-1 md:grid-cols-12 gap-6">
              <div className="md:col-span-5">
                <label htmlFor="keyword" className="block text-sm font-medium text-gray-700 mb-1">
                  <FontAwesomeIcon icon={faSearch} className="mr-2 text-primary-500" />
                  Keywords
                </label>
                <input
                  type="text"
                  id="keyword"
                  className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                  placeholder="Job title, skills, or company name"
                  value={keyword}
                  onChange={(e) => setKeyword(e.target.value)}
                />
              </div>
              
              <div className="md:col-span-4">
                <label htmlFor="location" className="block text-sm font-medium text-gray-700 mb-1">
                  <FontAwesomeIcon icon={faMapMarkerAlt} className="mr-2 text-primary-500" />
                  Location
                </label>
                <input
                  type="text"
                  id="location"
                  className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                  placeholder="City, state, or remote"
                  value={location}
                  onChange={(e) => setLocation(e.target.value)}
                />
              </div>
              
              <div className="md:col-span-3 flex items-end space-x-2">
                <ButtonHover
                  type="submit"
                  className="flex-grow bg-primary-600 hover:bg-primary-700 text-white px-6 py-3 rounded-lg font-medium flex items-center justify-center"
                >
                  <FontAwesomeIcon icon={faSearch} className="mr-2" />
                  Search Jobs
                </ButtonHover>
                
                <ButtonHover
                  type="button"
                  onClick={toggleFilters}
                  className="bg-gray-100 hover:bg-gray-200 text-gray-700 px-3 py-3 rounded-lg flex items-center justify-center"
                >
                  <FontAwesomeIcon icon={faSlidersH} />
                </ButtonHover>
              </div>
            </div>
            
            {showFilters && (
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-6 pt-6 border-t border-gray-200">
                <div>
                  <label htmlFor="jobType" className="block text-sm font-medium text-gray-700 mb-1">
                    <FontAwesomeIcon icon={faBriefcase} className="mr-2 text-primary-500" />
                    Job Type
                  </label>
                  <select
                    id="jobType"
                    className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                    value={jobType}
                    onChange={(e) => setJobType(e.target.value)}
                  >
                    <option value="">All Job Types</option>
                    {JOB_TYPES.map((type) => (
                      <option key={type.value} value={type.value}>
                        {type.label}
                      </option>
                    ))}
                  </select>
                </div>
                
                <div>
                  <label htmlFor="experienceLevel" className="block text-sm font-medium text-gray-700 mb-1">
                    <FontAwesomeIcon icon={faUserGraduate} className="mr-2 text-primary-500" />
                    Experience Level
                  </label>
                  <select
                    id="experienceLevel"
                    className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                    value={experienceLevel}
                    onChange={(e) => setExperienceLevel(e.target.value)}
                  >
                    <option value="">All Experience Levels</option>
                    {EXPERIENCE_LEVELS.map((level) => (
                      <option key={level.value} value={level.value}>
                        {level.label}
                      </option>
                    ))}
                  </select>
                </div>
                
                <div className="flex items-end">
                  <ButtonHover
                    type="button"
                    onClick={clearFilters}
                    className="text-primary-600 hover:text-primary-800 font-medium px-4 py-2 rounded-lg flex items-center transition-colors"
                  >
                    <FontAwesomeIcon icon={faTimesCircle} className="mr-2" />
                    Clear Filters
                  </ButtonHover>
                </div>
              </div>
            )}
          </form>
        </div>
        
        {/* Job Listings Section */}
        {loading ? (
          <div className="flex flex-col items-center py-20">
            <Loader />
            <PulseLoader className="mt-4 text-gray-600">
              Finding the perfect opportunities...
            </PulseLoader>
          </div>
        ) : error ? (
          <Message variant="error">{error}</Message>
        ) : (
        <>
          {jobs.length === 0 ? (
            <div className="bg-white rounded-xl shadow-md p-8 text-center max-w-2xl mx-auto transform transition-all duration-300 hover:shadow-lg">
              <div className="w-16 h-16 bg-gray-100 rounded-full mx-auto mb-4 flex items-center justify-center">
                <FontAwesomeIcon icon={faBriefcase} className="text-2xl text-gray-500" />
              </div>
              <h3 className="text-xl font-semibold mb-2">No Jobs Found</h3>
              <p className="text-gray-600">Try adjusting your search criteria or filters to find more opportunities.</p>
            </div>
          ) : (
            <>
              <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
                {jobs.map((job, index) => (
                  <AnimatedJobCard
                    key={job._id}
                    index={index}
                    className="bg-white rounded-lg shadow-md p-6 relative overflow-hidden"
                  >
                    <div className="flex justify-between items-start mb-4">
                      <div>
                        <h3 className="text-lg font-semibold text-gray-900 hover:text-blue-600 transition-colors">
                          {job.title}
                        </h3>
                        <p className="text-gray-600 text-sm flex items-center mt-1">
                          <FontAwesomeIcon icon={faMapMarkerAlt} className="mr-2" />
                          {job.location}
                        </p>
                      </div>
                      <div className="text-sm font-medium px-3 py-1 rounded-full bg-blue-100 text-blue-800">
                        {job.type}
                      </div>
                    </div>

                    <div className="space-y-2">
                      <p className="text-gray-700 flex items-center">
                        <FontAwesomeIcon icon={faBriefcase} className="mr-2 text-gray-500" />
                        {job.company}
                      </p>
                      <p className="text-gray-700 flex items-center">
                        <FontAwesomeIcon icon={faMoneyBillWave} className="mr-2 text-gray-500" />
                        {job.salary}
                      </p>
                    </div>

                    <div className="mt-4 pt-4 border-t border-gray-100 flex justify-between items-center">
                      <span className="text-sm text-gray-500 flex items-center">
                        <FontAwesomeIcon icon={faCalendarAlt} className="mr-2" />
                        Posted {new Date(job.createdAt).toLocaleDateString()}
                      </span>
                      <ButtonHover
                        type="button"
                        className="text-blue-600 hover:text-blue-800 font-medium text-sm"
                      >
                        View Details
                      </ButtonHover>
                    </div>
                  </AnimatedJobCard>
                ))}
              </div>

              {/* Pagination with animation */}
              <div className="mt-8 flex justify-center space-x-2">
                {Array.from({ length: pages }, (_, i) => (
                  <ButtonHover
                    key={i + 1}
                    onClick={() => setCurrentPage(i + 1)}
                    className={`px-4 py-2 rounded transition-all duration-200 ${
                      page === i + 1
                        ? 'bg-blue-600 text-white shadow-md'
                        : 'bg-white text-gray-600 hover:bg-gray-100'
                    }`}
                  >
                    {i + 1}
                  </ButtonHover>
                ))}
              </div>
            </>
          )}
        </>
      )}
      </div>
    </div>
  );
};

export default JobListScreen;
